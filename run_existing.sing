//
system("--min-time", "0.001");
system("--ticks-per-sec", 1000);
option(noredefine);
option(redSB);

string NL = "
";
proc test_kgb(string bench_call, string gb_call)
{
	execute("string defs = " + bench_call);
	execute(defs);
	string uniq_name = bench_name+"_by_"+gb_call;
	sprintf("--- "+uniq_name+"---");
	int ot0 = timer;
	execute("ideal f =" + gb_call);
	int ot1 = timer;
	ideal f_reduced = interred(f);
	int ot2 = timer;
	string info = 
		sprintf("Size of reduced basis:    %s    non-reduced:%s",size(f_reduced),size(f)) + NL +
		sprintf("Time:                     %s    %s", ot1-ot0, ot2-ot1);
	printf(info);
	link save = "ASCII:w res/" + uniq_name;
	write(save,f_reduced);
	printf("saved");
}

newstruct("lp","poly s, poly p, poly lm");
newstruct("lpmul","lp","poly smuled");

proc gvw_less(lp p1, lp p2)
{
	return (p1.lm*p2.s<p2.lm*p1.s);
}
proc smul_less(lpmul p1, lpmul p2)
{
	return (p1.smuled<p2.smuled);
}

proc insert_in_sorted_list_with_pos(list sorted_list, def new_elem, string comp_func, int min_pos, int max_pos)
{
	string exec_str = "int compare_result="+comp_func+"(new_elem, sorted_list[pos+1])";
	int pos = -1;
	while (min_pos < max_pos - 1)
	{
		pos = (min_pos + max_pos) div 2;
		execute(exec_str);
		if (compare_result) {max_pos = pos;}
		else {min_pos = pos;}
	}
	pos = min_pos;
	while (pos < size(sorted_list))
	{
		execute(exec_str);
		if (compare_result) {break;}
		pos++;
	}
	return(insert(sorted_list, new_elem, pos), pos+1);
}
proc insert_in_sorted_list(list sorted_list, def new_elem, string comp_func)
{
	list result;
	int pos_unused;
	result, pos_unused = insert_in_sorted_list_with_pos(sorted_list, new_elem, comp_func, 0, size(sorted_list));
	return(result);
}

proc filter_gb_result(ideal gb)
{
	ideal result;
	for(int i = 1; i <= size(gb); i++)
	{
		poly lm = leadmonom(gb[i]);
		for(int ir = 1; ir <= size(gb); ir++)
		{
			if (lm/leadmonom(gb[ir]) > 1)
			{
				lm = poly(0);
				break;
			}		
		}	
		if (lm != 0) {result = result + gb[i];}
	}
	return(result);
}

int prev_time = 0;
proc time_from_last_call()
{
	int new_time = timer;
	int result = new_time - prev_time;
	prev_time = new_time;
	return (result);
}

proc ssg_sing(ideal I_input)
{
	int time_interred, time_prepare, time_reduction_search, time_reduction, time_add_r, time_filter_b, time_add_b1, time_add_b2;
	proc create_lp(poly s, poly p)
	{
		lp result;
		result.s = s;
		result.p = p;
		result.lm = leadmonom(p);
		return(result);
	}
	proc create_lpmul(poly mul_by, lp sp)
	{
		lpmul result;
		result.smuled = sp.s*mul_by;
		result.s = sp.s;
		result.p = sp.p;
		result.lm = sp.lm;
		return(result);
	}
	proc norm_leadcoef(poly p)
	{
		return(simplify(p,1));
	}
	int zero_reductions = 0;
	ideal I0 = I_input[1];
	for (int n = 2; n <= size(I_input); n++)
	{
		int unused = time_from_last_call();
		I0 = filter_gb_result(I0);
		time_interred = time_interred + time_from_last_call();
		lp p = create_lp(1,I_input[n]);
		list R;
		list B;
		
		for (int n0 = 1; n0 <= size(I0); n0++)
		{
			R = list(create_lp(leadmonom(I0[n0]), 0)) + R + list(create_lp(0,norm_leadcoef(I0[n0])));
		}
		time_prepare = time_prepare + time_from_last_call();
		while(1)
		{
			int reduced_to_zero = 0;
			int min_used_reductor = size(R);
			while(1)
			{
				lp reductor;
				poly plead = p.lm;
				poly div_result = 0;
				for (int n0 = size(R); n0 >=1 ; n0--)
				{
					lp rn = R[n0];
					if (n0 < min_used_reductor){if (gvw_less(p,rn) == 0) {break;}}
					div_result = plead/rn.lm;
					if (div_result!=0)
					{
						reductor = rn;
						min_used_reductor = n0;
						break;
					}
				}
				time_reduction_search = time_reduction_search + time_from_last_call();
				if (reductor.p == 0) {break;}
				p.p = norm_leadcoef(p.p-div_result*reductor.p);
				p.lm = leadmonom(p.p);
				time_reduction = time_reduction + time_from_last_call();
				if (p.p == 0)
				{
					reduced_to_zero = 1;
					zero_reductions++;
					break;
				}
			}
			int insert_position = -1;
			R,insert_position = insert_in_sorted_list_with_pos(R, p, "gvw_less", 0, min_used_reductor);
			time_add_r = time_add_r + time_from_last_call();
			int nb = 1;
			poly psig = p.s;
			poly plead = p.lm;
			while (nb <= size(B))
			{
				lpmul b = B[nb];
				
				if (b.smuled/psig == 0)
				{
					nb++;
				}
				else
				{
					if (reduced_to_zero == 1)
					{
						B = delete(B, nb);
					}
					else
					{
						poly l1 = plead*b.s;
						poly l2 = b.lm*psig;

						if (l1<l2)
						{
							B = delete(B, nb);						
						}
						else
						{
							nb++;
						}
					}
				}
			}
			time_filter_b = time_filter_b + time_from_last_call();
			if (reduced_to_zero == 0)
			{
				for (int n0 = size(R); n0 > insert_position; n0--)
				{
					lp rn = R[n0];					
					if (gvw_less(p,rn) == 0) {break;}
					poly l2 = rn.lm;
					lpmul b_new = create_lpmul(l2/gcd(l2,plead),p);
					poly b_new_sig =  b_new.smuled;
					for (int nr_2 = 1; nr_2 < insert_position; nr_2++)
					{
						lp rn2 = R[nr_2];
						if (b_new_sig/rn2.s != 0)
						{
							b_new.smuled = poly(0);
							break;
						}
					}
					if (b_new.smuled != 0)
					{
						B = insert_in_sorted_list(B, b_new, "smul_less");
					}
				}
				time_add_b1 = time_add_b1 + time_from_last_call();
				for (int n0 = 1; n0 < insert_position; n0++)
				{
					lp rn = R[n0];
					if (gvw_less(rn,p) == 0) {break;}
					if (rn.p == 0) {n0++; continue;}
					poly l2 = rn.lm;
					lpmul b_new = create_lpmul(plead/gcd(l2,plead),rn);
					poly b_new_sig =  b_new.smuled;
					for (int nr_2 = 1; nr_2 < n0; nr_2++)
					{
						lp rn2 = R[nr_2];
						if (b_new_sig/rn2.s != 0)
						{
							b_new.smuled = poly(0);
							break;
						}
					}
					if (b_new.smuled != 0)
					{
						B = insert_in_sorted_list(B, b_new, "smul_less");
					}
				}
				time_add_b2 = time_add_b2 + time_from_last_call();
			}
			if (size(B) == 0) break;
			lpmul bs_premul = B[1];
			p = create_lp(bs_premul.smuled, bs_premul.p*(bs_premul.smuled/bs_premul.s));			
		}
		ideal result;
		for (int n0 = 1; n0 <= size(R); n0++)
		{
			lp rn = R[n0];
			if (rn.p != 0) {result = result + rn.p;}
		}
		I0 = result;
	}

	printf("time time_interred = %s", time_interred);
	printf("time time_prepare = %s", time_prepare);
	printf("time time_reduction_search = %s", time_reduction_search);
	printf("time time_reduction = %s", time_reduction);
	printf("time time_add_r = %s", time_add_r);
	printf("time time_filter_b = %s", time_filter_b);
	printf("time time_add_b1 = %s", time_add_b1);
	printf("time time_add_b2 = %s", time_add_b2);

	printf("ZERO REDUCTIONS: %s", zero_reductions);
	return(I0);
}


proc simple_test_ideal()
{
    return ("ring R; ideal i=x*y+x,x*x,y;bench_name = \"SIMPLE-TEST\"")
}

proc get_from_benchs(string bench_name)
{
	return(bench_ringdef + bench_idealdef+"string bench_name = \""+bench_name+"\";");
}

proc fb(string bench_name)
{
	LIB("benchs.lib");
	execute("string bench_name_result = " + bench_name);
	string bench_idealdef = "ideal i = " + string(i)+";";
	string bench_ringdef = "ring R = ("+charstr(basering)+"),("+varstr(basering)+"),("+ordstr(basering)+");";
	export(bench_ringdef);
	export(bench_idealdef);
	return("get_from_benchs(\""+bench_name_result+"\")");
}

string basic_ideal=fb("cyclicn(5)");
//string basic_ideal=fb("katsuran(7)");
//string basic_ideal="simple_test_ideal()";
//test_kgb(basic_ideal, "sba(i,0,1)");
test_kgb(basic_ideal, "sba(i,0,0)");
test_kgb(basic_ideal, "sba(i,1,0)");
test_kgb(basic_ideal, "ssg_sing(i)");
test_kgb(basic_ideal, "sba(i,0,0)");
test_kgb(basic_ideal, "sba(i,1,0)");

//test_kgb("katsuran(11)", "sba(i,0,0)");
//test_kgb("katsuran(11)", "sba(i,1,0)");
//test_kgb("katsuran(11)", "ssg_sing(i)");
//test_kgb(basic_ideal, "sba(i,1,1)");
$
	